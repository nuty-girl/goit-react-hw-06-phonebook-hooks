{"version":3,"sources":["Components/ContactForm.js","Components/Filter.js","Components/ContactList.js","App.js","index.js"],"names":["ContactForm","saveContact","useState","name","setName","number","setNumber","nameInputId","useRef","shortid","generate","current","numberInputId","className","onSubmit","e","preventDefault","htmlFor","id","type","value","onChange","target","filterInputId","Filter","onChangeFilter","defaultProps","ContactList","contacts","onDeleteContact","map","key","onClick","contactsReducer","state","action","payload","persistedContacts","contact","filter","initialContacts","ReactDOM","render","useReducer","dispatch","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","setFilter","filteredContacts","console","log","toLowerCase","includes","length","alert","document","getElementById"],"mappings":"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","file":"static/js/main.a5d508da.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport T from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nexport default function ContactForm({ saveContact }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const hadleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    saveContact({ name, number });\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleChangeName = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleChangeNumber = e => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const nameInputId = useRef(shortid.generate()).current;\r\n  const numberInputId = useRef(shortid.generate()).current;\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={hadleSubmit}>\r\n      <label htmlFor={nameInputId}>\r\n        Name\r\n        <input\r\n          id={nameInputId}\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={handleChangeName}\r\n          name=\"name\"\r\n        />\r\n      </label>\r\n\r\n      <label htmlFor={numberInputId}>\r\n        Number\r\n        <input\r\n          id={numberInputId}\r\n          type=\"number\"\r\n          value={number}\r\n          onChange={handleChangeNumber}\r\n          name=\"number\"\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\">add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  saveContact: T.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nconst filterInputId = shortid.generate();\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <label htmlFor={filterInputId}>\r\n    Find contacts by name\r\n    <input\r\n      id={filterInputId}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChangeFilter}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: T.string,\r\n  onChangeFilter: T.func.isRequired,\r\n};\r\n\r\nFilter.defaultProps = {\r\n  value: '',\r\n};\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nimport T from 'prop-types';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        <span>{name}: </span>\r\n        <span>{number}</span>\r\n        <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: T.arrayOf(\r\n    T.shape({\r\n      id: T.string.isRequired,\r\n      name: T.string.isRequired,\r\n      number: T.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onDeleteContact: T.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { useState, useEffect, useReducer } from 'react';\r\nimport shortid from 'shortid';\r\nimport ContactForm from './Components/ContactForm';\r\nimport Filter from './Components/Filter';\r\nimport ContactList from './Components/ContactList';\r\n\r\nimport './App.css';\r\n\r\nconst contactsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'addPersistedContacts':\r\n      return [...action.payload.persistedContacts];\r\n\r\n    case 'addContact':\r\n      return [...state, action.payload.contact];\r\n\r\n    case 'deleteContact':\r\n      return state.filter(contact => contact.id !== action.payload.id);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nexport default function App() {\r\n  const [contacts, dispatch] = useReducer(contactsReducer, initialContacts);\r\n\r\n  useEffect(() => {\r\n    const persistedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n    if (!persistedContacts) return;\r\n\r\n    dispatch({ type: 'addPersistedContacts', payload: { persistedContacts } });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = ({ name, number }) => {\r\n    const filteredName = contacts.filter(contact => contact.name === name);\r\n    if (filteredName.length > 0) {\r\n      alert(`${name} is already in contacts!`);\r\n      return;\r\n    }\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n    dispatch({ type: 'addContact', payload: { contact } });\r\n  };\r\n\r\n  const deleteContact = id => {\r\n    dispatch({ type: 'deleteContact', payload: { id } });\r\n  };\r\n\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const onChangeFilter = e => setFilter(e.target.value);\r\n\r\n  const filteredContacts = contacts.filter(contact => {\r\n    console.log(contact.name.toLowerCase().includes(filter));\r\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\r\n  });\r\n  console.log(contacts);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm saveContact={addContact} />\r\n      <h2>Contacts</h2>\r\n      <Filter value={filter} onChangeFilter={onChangeFilter} />\r\n      <ContactList\r\n        contacts={filteredContacts}\r\n        onDeleteContact={deleteContact}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// useMemo(\r\n//   () =>\r\n//     contacts.filter(contact =>\r\n//       // contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//       // console.log(contact.name),\r\n//       contact.name.includes(filter.toLowerCase()),\r\n//     ),\r\n//   [contacts, filter],\r\n// );\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}